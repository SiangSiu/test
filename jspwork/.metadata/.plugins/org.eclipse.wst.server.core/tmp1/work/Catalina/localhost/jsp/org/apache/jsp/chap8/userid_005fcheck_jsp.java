/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.35
 * Generated at: 2016-06-13 16:11:02 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.chap8;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.sql.*;

public final class userid_005fcheck_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  public java.lang.String getServletInfo() {
    return "userid check";
  }

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=EUC-KR");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			"error.jsp", true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write(" \r\n");
      out.write(" ");

 String userid = request.getParameter("userid");
 String query = new String();
 
 int check_count = 0;
 boolean bJoin = false;
 
 Connection conn = null;
 Statement stmt = null;
 ResultSet rs = null;
 
 try {
  Class.forName("org.gjt.mm.mysql.Driver");
 } catch (ClassNotFoundException e ) {
  out.println(e);
 }
    
 try {
  conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/member?useUnicode=true&characterEncoding=euckr","root","apmsetup");
  stmt = conn.createStatement();

  query = "Select count(*) as count from member where userid='" + userid + "'";
  rs = stmt.executeQuery(query);
  rs.next();
  check_count = rs.getInt("count");
  rs.close();
 } catch(SQLException e){
 } finally {
  conn.close();
 }

      out.write("\r\n");
      out.write("\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=EUC-KR\">\r\n");
      out.write("<title>아이디 중복검사</title>\r\n");
      out.write("<link rel=\"StyleSheet\" href=\"style.css\" type=\"text/css\">\r\n");
      out.write("<script language=\"JavaScript\">\r\n");
      out.write("<!--\r\n");
      out.write("function checkEnd() {\r\n");
      out.write("\tvar form = document.id_check;\r\n");
      out.write("\topener.join.userid.value = form.userid.value;\r\n");
      out.write("\topener.join.userid_check.value = form.check_count.value;\r\n");
      out.write("\tself.close();\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("function doCheck(){\r\n");
      out.write("\tvar form = document.id_check;\r\n");
      out.write("\tif(!checkValue(form.userid, '아이디', 5, 16)){\r\n");
      out.write("\t\treturn;\r\n");
      out.write("\t}\r\n");
      out.write("\tform.submit();\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("function checkValue(target, cmt, lmin, lmax) {\r\n");
      out.write("\tvar Alpha = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\r\n");
      out.write("\tvar Digit = '1234567890';\r\n");
      out.write("\tvar astr = Alpha+Digit;\r\n");
      out.write("\tvar i;\r\n");
      out.write("\tvar tValue = target.value;\r\n");
      out.write("\tif(tValue.length < lmin || tValue.length > lmax) {\r\n");
      out.write("\t\tif(lmin==lmax) alert(cmt+'는'+lmin+'Byte이어야 합니다.');\r\n");
      out.write("\t\t\telse alert(cmt+'는'+lmin+ '~'+lmax+'Byte 이내로 입력하셔야 합니다.');\r\n");
      out.write("\t\ttarget.focus();\r\n");
      out.write("\t\treturn false;\r\n");
      out.write("\t}\r\n");
      out.write("\tif(astr.length > 1) {\r\n");
      out.write("\t\tfor (i=0; i<tValue.length; i++){\r\n");
      out.write("\t\t\tif(astr.indexOf(tValue.substring(i, i+1))<0) {\r\n");
      out.write("\t\t\t\talert(cmt+'에 허용할 수 없는 문자가 입력되었습니다.');\r\n");
      out.write("\t\t\t\ttarget.focus();\r\n");
      out.write("\t\t\t\treturn false;\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}\r\n");
      out.write("\t}\r\n");
      out.write("\treturn true;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("-->\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("</head>\r\n");
      out.write("<body text=\"#000000\" bgcolor=\"#FFFFFF\" leftmargin=\"0\" topmargin=\"0\" marginwidth=\"0\" marginheight=\"0\">\r\n");
      out.write(" <br/>\r\n");
      out.write(" <br/>\r\n");
      out.write(" <form name=\"id_check\" method=\"post\" action=\"userid_check.jsp\">\r\n");
      out.write("  <input type=\"hidden\" name=\"check_count\" value=\"");
      out.print(check_count);
      out.write("\">\r\n");
      out.write(" <table width=\"300\" border=\"0\" cellspacing=\"0\" cellpadding=\"0\" align=\"center\" class=\"style1\">\r\n");
      out.write("  <tr>\r\n");
      out.write("   <td>원하는 아이디를 입력하세요.</td>\r\n");
      out.write("  </tr>\r\n");
      out.write(" </table>\r\n");
      out.write(" <table width=\"300\" border=\"0\" bgcolor=\"#B6C1D6\" height=\"39\" align=\"center\" class=\"style1\">\r\n");
      out.write("  <tr> \r\n");
      out.write("   <td bgcolor=\"#ffffff\" width=\"40%\" align=\"center\"> \r\n");
      out.write("    <input type=\"text\" name=\"userid\" value=\"");
      out.print(userid);
      out.write("\" onFocus=\"this.value=''\" maxlength=\"16\" size=\"16\" class=\"input_style1\">\r\n");
      out.write("    <input type=\"button\" value=\"중복확인\" onClick=\"doCheck()\" class=\"input_style1\">\r\n");
      out.write("   </td>\r\n");
      out.write("  </tr>\r\n");
      out.write("  <tr>\r\n");
      out.write("   <td>\r\n");
      out.write("   ");

    if(check_count > 0){
   
      out.write("\r\n");
      out.write("     ▶ [");
      out.print(userid);
      out.write("]은 등록되어있는 아이디입니다.<br>▷ 다시 시도해주십시오.\r\n");
      out.write("   ");

    }else{
   
      out.write("\r\n");
      out.write("     ▶ [");
      out.print(userid);
      out.write("]은 사용 가능합니다.\r\n");
      out.write("   ");

    }
   
      out.write("\r\n");
      out.write("   </td>\r\n");
      out.write("  </tr>\r\n");
      out.write(" </table>\r\n");
      out.write(" <table width=\"100%\" border=\"0\" cellspacing=\"0\" cellpadding=\"0\" align=\"center\">\r\n");
      out.write("  <tr>\r\n");
      out.write("   <td align=\"center\">\r\n");
      out.write("    <input type=\"button\" value=\"확인\" onClick=\"checkEnd()\" class=\"style1\">\r\n");
      out.write("   </td>\r\n");
      out.write("  </tr>\r\n");
      out.write(" </table>\r\n");
      out.write(" </form>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
